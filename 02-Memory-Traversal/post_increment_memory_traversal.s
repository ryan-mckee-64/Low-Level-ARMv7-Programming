@CHALLENGE: POST-INCREMENT AND MEMORY TRAVERSAL -> THREE INTEGERS A,B,C WITHIN STACK MEMORY.
@TASK 1) LOAD THE INTEGERS SEQUENTIALLY INTO R1,R2,R3 USING POST-INCREMENT ADDRESSING AFTER EACH LOAD
@TASK 2) FIND THE SUM OF ALL THREE INTEGERS, FIND THE PRODUCT OF ALL THREE INTEGERS
@TASK 3) STORE THE SUM AND PRODUCT BACK TO MEMORY, DIRECTLY AFTER THE ORIGINAL 3 INTEGERS, ONCE AGAIN, USING POST-INCREMENT ADDRESSING
@BONUS) DO NOT ADD IN TWO SEPARATE STEPS, ADD THE THREE INTEGERS IN ONE FLUID, EFFICIENT MANNER.

@FIRST TRY / NO HELP / NO IDE

.global _start
_start:
@TASK 1 -> WRITING INTEGERS TO REGISTERS FROM THE STACK VIA POST-INCREMENT ADDRESSING
	MOV R0,=list @SETTING BASE-REGISTER/POINTER OF R0 TO THE STACK ADDRESS OF THE BEGINNING OF OUR LIST WITHIN THE STACK (LITERAL ADDRESSING)
	LDR R1,[R0],#4 @USING POST-INCREMENT ADDRESSING IN ORDER TO FIRST, TRAVERSE TO THE FIRST ENTRY WITHIN THE LIST, WRITE THE CONTENTS TO REGISTER 1, THEN INCREMENT THE POINTER TO R0+4-BYTES - INTEGER A
	LDR R2,[R0],#4 @NOW THAT THE POINTER HAS BEEN UPDATED TO R0+4-BYTES, WE CAN JUST EXTRACT THE CONTENTS FROM [R0], SO WE FIRST WRITE THE CONTENTS FROM THE UPDATED POINTER, THEN INCREMENT TO THE NEXT ENTRY WITHIN THE LIST - INTEGER B
	LDR R3,[R0],#4 @NOW THE POINTER HAS BEEN UPDATED TO R0+8-BYTES, SIGNIFYING THAT WE ARE AT OUR LAST ENTRY WITHIN THE LIST, SO WE WRITE THE CONTENTS OF INTEGER C TO REGISTER 3, AND THEN INCREMENT BY 4-BYTES IN ORDER TO PREPARE FOR PLACING THE RESULTS BACK INTO THE STACK MEMORY LIST, AFTER INTEGER C
@TASK 2 -> FINDING SUM / MULTIPLICATION RESULT OF INTEGERS A,B,C
	ADD R4,R1,R2 @ADDING INTEGERS "A" AND "B" TOGETHER AND STORING WITHIN REGISTER 4
	ADD R5,R4,R3 @NOW ADDING THE PREVIOUS RESULT OF THE ADDITION OF INTEGERS "A" AND "B" TO THE REGISTER WRITTEN WITH INTEGER C, IN THIS CASE, REGISTER 3. WE NOW HAVE THE SUM OF ALL THREE INTEGERS WRITTEN INTO REGISTER 5
	MUL R4,R1,R2 @SINCE WE USED R4 AS AN INTERMEDIARY TO JUST HOLD THE ADDITION OF THE FIRST TWO INTEGERS, WE ARE OVERWRITING IT WITH THE INTEGER MULTIPLICATION OF "A" AND "B", AND WE WILL USE IT IN THE NEXT LINE AND STORE THE FINAL PRODUCT WITHIN REGISTER 6
	MUL R6,R4,R3 @NOW WE ARE TAKING OUR RESULT OF MULTPLICATION OF INTEGERS "A" AND "B" PREVIOUSLY STORED IN R4, AND MULTIPLYING IT BY OUR THIRD AND FINAL INTEGER STORED WITHIN REGISTER 3. THEN WE ARE TAKING THE FINAL PRODUCT AND STORING IT WITHIN REGISTER 6
@TASK 3 -> STORING THE SUM AND PRODUCTS OF THE THREE INTEGERS BACK IN THE STACK, SEQUENTIALLY AFTER THE LAST INTEGER "C" VIA POST-INCREMENT ADDRESSING
	STR R5,[R0],#4 @STORING THE SUM OF INTEGERS A,B, AND C BACK INTO THE STACK MEMORY LIST, RIGHT AFTER THE LAST ENTRY (INTEGER C), SINCE OUR POINTER WAS ALREADY INCREMENTED TO R0+12-BYTES, VIA OUR PREVIOUS POST-INCREMENT ADDRESSING, WE CAN SIMPLY WRITE IT TO [R0], AND THEN INCREMENT BY ANOTHER 4-BYTES IN ORDER TO PREPARE FOR STORING THE MULTIPLICATION RESULT NEXT
	STR R6,[R0],#4 @STORING THE MULTIPLICATION OF INTEGERS A,B,C BACK INTO LIST, WE HAVE NOW STORED THE CONTENTS WRITTEN TO REGISTER 6, AND INCREMENTED OUR POINTER AGAIN BY 4-BYTES, JUST IN CASE WE LATER WANT TO PLACE ANYTHING IN LIST SEQUENTIALLY

@BONUS CHALLENGE -> FIGURE OUT A WAY TO SUM THREE INTEGERS IN A MORE EFFICIENT WAY
@THERE IS NO WAY TO LMAO

.data @CREATING SECTION OF PROGRAM TO STORE MEMORY WITHIN THE STACK
list: @DEFINING REFERENCE LABEL FOR OUR STACK MEMORY DATA PORTION STORING INTEGERS: A,B,C
	.word 2,3,4 @DEFINING LENGTH OF EACH ENTRY, AS WELL AS EACH ENTRY a=2, b=3, c=4

	@IF EVERYTHING WENT WELL AND COMPILATION/LOADING WAS SUCCESSFUL, OUR LIST SHOULD BE AS FOLLOWS
	@LIST[0]=2, LIST[1]=3, LIST[2]=4, LIST[3]=9, LIST[4]=24
