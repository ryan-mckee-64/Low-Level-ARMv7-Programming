 @ CHALLENGE DESCRIPTION: USE ARMv7 INSTRUCTIONS TO LOAD TWO INTEGERS FROM MEMORY USING MULTIPLE ADDRESSING MODES, PERFORM ARITHMETIC OPERATIONS (ADD,SUB,MUL), AND STORE RESULTS BACK TO MEMORY
 @ USING OFFSET ADDRESSING


.global _start @CREATING GLOBAL REFERENCE TO START LABEL
_start: @DEFINING A START LABEL TO SHOW PROGRAM WHERE INSTRUCTIONS BEGIN EXECUTION
	LDR R0,=list @USING LITERAL ADDRESSING TO STORE STACK MEMORY ADDRESS OF THE FIRST ENTRY OF OUR LIST "INTEGER "A"' INTO REGISTER 0
	LDR R1,[R0] @USING INDIRECT ADDRESSING TO WRITE THE CONTENTS OF OUR FIRST ENTRY WITHIN THE LIST TO REGISTER 1
	LDR R2,[R0,#4] @USING INDIRECT ADDRESSING WITH AN OFFSET TO STORE THE CONTENTS OF OUR SECOND ENTRY WITHIN THE LIST IN REGISTER 2, VIA TAKING INITIAL ADDRESS "R0" AND OFFSETTING BY 4-BYTES TO TRAVERSE THE LIST
	ADD R3,R1,R2 @USING "ADD" OP-CODE TO ADD THE CONTENTS OF REGISTERS 1 AND 2 AND WRITING THEM TO REGISTER 3
	SUB R4,R1,R2 @USING "SUB" OP-CODE TO SUBTRACT THE CONTENTS OF REGISTERS 1 AND 2 AND WRITING THEM TO REGISTER 4
	MUL R5,R1,R2 @USING "MUL" OP-CODE TO MULTIPLY THE CONTENTS OF REGISTERS 1 AND 2 AND WRITING THEM TO REGISTER 5
	STR R3,[R0,#8] @USING THE "STR" OPCODE TO WRITE THE CONTENTS OF R3 TO THE MEMORY ADDRESS OFFSETTED BY 8-BYTES FROM OUR BASE-REGISTER/POINTER ADDRESS "R0"
	STR R4,[R0,#12] @USING THE "STR" OPCODE TO WRITE THE CONTENTS OF R4 TO THE MEMORY ADDRESS OFFSETTED BY 12-BYTES FROM OUR BASE-REGISTER/POINTER ADDRESS "R0"
	STR R5,[R0,#16] @USING THE "STR" OPCODE TO WRITE THE CONTENTS OF R5 TO THE MEMORY ADDRESS OFFSETTED BY 16-BYTES FROM OUR BASE-REGISTER/POINTER ADDRESS "R0"
	
	@NOW OUR RESULTS FROM THE ARITHMETIC OPERATIONS HAVE BEEN STORED CONSECUTIVELY WITHIN THE STACK ADDRESS AFTER OUR BASE REGISTER ADDRESS HELD BY "R0"
	@ LIST[0]=5, LIST[1]=9, LIST[2]=14, LIST[3]=-4, LIST[4]=45
	
.data @WE WANT TO STORE THE RESULTS/DATA CONSECUTIVELY, SO I WILL MAKE A LIST SECTION WITHIN THE STACK
list: @DEFINING A LABEL FOR OUR LIST IN ORDER TO REFERNCE FROM THE STACK AND ADDRESS/MOVE TO REGISTERS
	.word 5,9, @DEFINING EACH ENTRY TO BE 32-BITS IN LENGTH, INTEGER "A" WILL BE 5, AND INTEGER "B" WILL BE 9. LIST[0]=5, LIST[1]=9
